@using SimpleChatAppWithBlazor.Shared.Models
@using SimpleChatAppWithBlazor.Services
@inject IChatService ChatService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="chat-container">
    <div class="chat-header">
        <h3>Chat Room</h3>
        @if (!string.IsNullOrEmpty(_userName))
        {
            <span>Welcome, @_userName!</span>
        }
    </div>

    <div class="chat-messages" @ref="_messageList">
        @foreach (var message in _messages)
        {
            <div class="message @(message.SenderId == _userId ? "sent" : "received")">
                <div class="message-header">
                    <span class="sender">@message.SenderName</span>
                    <span class="time">@message.Timestamp.ToLocalTime().ToString("g")</span>
                </div>
                <div class="message-content">
                    @message.Content
                </div>
            </div>
        }
    </div>

    <div class="chat-input">
        <input @bind="_newMessage" @bind:event="oninput" @onkeypress="HandleKeyPress" placeholder="Type a message..."
            disabled="@(!_isConnected)" />
        <button @onclick="SendMessageAsync" disabled="@(!_isConnected)">Send</button>
    </div>
</div>

@code {
    private string _userId = Guid.NewGuid().ToString();
    private string _userName = "";
    private string _newMessage = "";
    private bool _isConnected;
    private List<ChatMessage> _messages = new();
    private ElementReference _messageList;

    protected override async Task OnInitializedAsync()
    {
        ChatService.OnMessageReceived += HandleMessageReceived;

        // Prompt for username
        while (string.IsNullOrWhiteSpace(_userName))
        {
            _userName = await JSRuntime.InvokeAsync<string>("prompt", "Enter your name:");
        }

        await ConnectToChat();
    }

    private async Task ConnectToChat()
    {
        try
        {
            await ChatService.ConnectAsync(_userName);
            _isConnected = true;
            var history = await ChatService.GetMessageHistoryAsync();
            _messages = history.ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to chat: {ex.Message}");
            _isConnected = false;
        }
    }

    private void HandleMessageReceived(ChatMessage message)
    {
        _messages.Add(message);
        InvokeAsync(StateHasChanged);
        InvokeAsync(ScrollToBottom);
    }

    private async Task SendMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(_newMessage)) return;

        await ChatService.SendMessageAsync(_newMessage);
        _newMessage = "";
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessageAsync();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", _messageList);
    }

    public async ValueTask DisposeAsync()
    {
        ChatService.OnMessageReceived -= HandleMessageReceived;
        await ChatService.DisconnectAsync();
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        max-width: 800px;
        margin: 0 auto;
        padding: 1rem;
    }

    .chat-header {
        padding: 1rem;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .message {
        max-width: 70%;
        padding: 0.5rem 1rem;
        border-radius: 1rem;
        margin: 0.5rem 0;
    }

    .sent {
        align-self: flex-end;
        background-color: #007bff;
        color: white;
    }

    .received {
        align-self: flex-start;
        background-color: #e9ecef;
    }

    .message-header {
        font-size: 0.8rem;
        margin-bottom: 0.25rem;
    }

    .time {
        opacity: 0.7;
        margin-left: 0.5rem;
    }

    .chat-input {
        display: flex;
        gap: 0.5rem;
        padding: 1rem;
        background-color: #f8f9fa;
        border-top: 1px solid #dee2e6;
    }

    .chat-input input {
        flex: 1;
        padding: 0.5rem;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
    }

    .chat-input button {
        padding: 0.5rem 1rem;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
    }

    .chat-input button:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }
</style>